#+TITLE: DotEmacs
#+AUTHOR: K Gopal Krishna

* Table of Content :TOC:
- [[#bootstrap][Bootstrap]]
  - [[#repositories][Repositores]]
  - [[#use-package][Use Package]]
- [[#better-defaults][Better Defaults]]
  - [[#remove-elements][Remove Intrusive Elements]]
  - [[#default-values][Default Values]]
  - [[#default-modes][Default Modes]]
  - [[Speed up Emacs]]
- [[#evil][Going Evil]]
- [[#keybindings][Keybindings]]
- [[#utility][Utility]]
- [[#language-support][Language Support]]
- [[User Interface]]
* Bootstrap Package Management
:PROPERTIES:
:CUSTOM_ID: bootstrap
:END:
#+BEGIN_QUOTE
Let us change our traditional attitude to the construction
of programs. Instead of imagining that our main task is to
instruct a computer what to do, let us concentrate rather
on explaining to human beings what we want a computer to
do.

--- /Donald Knuth/
#+END_QUOTE
** Repositories
:PROPERTIES:
:CUSTOM_ID: repositories
:END:
- Load =package= (the Emacs package manager)
- Don't start it until repositories' location have been set
- Set repositories for =package= and start =package=
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (setq package-archives
    '(("org"   . "http://orgmode.org/elpa/")
      ("gnu"   . "http://elpa.gnu.org/packages/")
      ("melpa" . "https://melpa.org/packages/")))
  (package-initialize)
#+END_SRC
** Use-Package
:PROPERTIES:
:CUSTOM_ID: use-package
:END:
- Unless =use-package= is installed, refresh repositories
  and install =use-package=.
- Load =use-package=.
- Be verbose while installing packages and always ensure
  their existence.
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (setq
   use-package-verbose t
   use-package-always-ensure t)
  (require 'use-package)
#+END_SRC
* Better Defaults
:PROPERTIES:
:CUSTOM_ID: better-defaults
:END:
** Backups
:PROPERTIES:
:CUSTOM_ID: backups
:END:
- By default, Emacs saves backup files in the current directory
- This can get annoying when file starting with *~* clutter up
  in directories
- The idea is to stash them all in one place
  i.e =~/.emacs.d/backups=
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC
Though I'm very conservative of my disk space, I find that
most of my disk space remains unused even if I'm careless.
So why not live freely instead?
- Version Control backup files
- Don't delete old versions
- Auto save every file
#+BEGIN_SRC emacs-lisp
  (setq
   delete-old-versions -1
   version-control t
   vc-make-backup-files t
   auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list" t)))
#+END_SRC
** History
:PROPERTIES:
:CUSTOM_ID: history
:END:
Emacs has a server-client architecture and that's cool. Although,
losing data over reboots (of the host or the server) is still
possible and annoying. Enable =savehist= to take care of those
issues.
- History is saved in =~/.emacs.d/savehist=
- Don't truncate history, i.e - history length infinite
- Delete duplicates
- In addition to saving minibuffer history, also save
  - deleted text sequences
  - searched text sequences
  - regular expression search text sequences
#+BEGIN_SRC emacs-lisp
  (setq
   savehist-file "~/.emacs.d/savehist"
   history-length t
   history-delete-duplicates t
   savehist-save-minibuffer-history 1
   savehist-additional-variables
   '(kill-ring
     search-ring
     regexp-search-ring))
  (savehist-mode 1)
#+END_SRC
** Remove intrusive elements:
:PROPERTIES:
:CUSTOM_ID: remove-elements
:END:
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)  ; Disable blinking cursor
  (fringe-mode 0)        ; Disable fringes
  (menu-bar-mode 0)      ; Disable menu bar
  (scroll-bar-mode 0)    ; Disable scroll bar
  (tool-bar-mode 0)      ; Disable toolbar
  (tooltip-mode 0)       ; Disable tooltips
#+END_SRC
** Some tweaks:
*** Set default values
:PROPERTIES:
:CUSTOM_ID: default-values
:END:
#+BEGIN_SRC emacs-lisp
  (setq-default
   ad-redefinition-action 'accept               ; Silence warnings for redefinition
   auto-window-vscroll nil                      ; Lighten vertical scroll
   confirm-kill-emacs 'yes-or-no-p              ; Confirm before exiting Emacs
   cursor-in-non-selected-windows t             ; Hide the curor in inactive windows
   delete-by-moving-to-trash t                  ; Delete files to trash
   display-line-numbers-type 'relative          ; Display relative line numbers
   display-time-default-load-average nil        ; Don't display load average
   display-time-format "%H:%M"                  ; Time format
   fill-column 60                               ; Set width for automatic line breaks
   help-window-select t                         ; Focus new help windows when opened
   indent-tabs-mode nil                         ; Stop using tabs to indent
   inhibit-startup-screen t                     ; Disable startup screen
   initial-scratch-message ""                   ; Initial scratch buffer should be empty
   left-margin-width 1                          ; Add left margin
   right-margin-width 1                         ; Add right margin
   scroll-conservatively most-positive-fixnum   ; Always scroll by one line
   scroll-margin 10                             ; Add a margin when scrolling vertically
   select-enable-clipboard t                    ; Merge system's and Emacs' clipboard
   sentence-end-double-space nil                ; End a sentence after a dot and a space
   show-trailing-whitespace t                   ; Show trailing whitespace
   show-paren-mode t                            ; Highlight matching parentheses
   tab-width 4                                  ; Set width for tabs
   uniquify-buffer-name-style 'forward          ; Set buffer name style for files that have same base folder
   window-combination-resize t                  ; Resize windows proportionally
   x-stretch-cursor t)                          ; Stretch cursor to the glypth width
#+END_SRC
*** Set default modes
:PROPERTIES:
:CUSTOM_ID: default-modes
:END:
#+BEGIN_SRC emacs-lisp
  (auto-fill-mode t)                            ; Wrap lines after fill-column value
  (cd "~/")                                     ; Move to the user's home directory
  (delete-selection-mode t)                     ; Replace region when inserting text
  (fset 'yes-or-no-p 'y-or-n-p)                 ; Replace yes / no with y / n
  (global-display-line-numbers-mode)            ; Enable line numbers globally
  (global-subword-mode t)                       ; Iterate through CamelCase ('GtkWindow', 'MyQueen', etc) words
  (mouse-avoidance-mode 'banish)                ; Avoid collision of mouse with point
  (set-default-coding-systems 'utf-8)           ; Defaults to utf-8 encoding
  (show-paren-mode)                             ; Show matching parentheses
#+END_SRC
** TODO Mode-line tweaks:
** Speed up Emacs
*** Garbage-collect
#+BEGIN_SRC emacs-lisp
  (add-hook 'focus-out-hook #'garbage-collect)
#+END_SRC
*** Custom.el
#+BEGIN_SRC emacs-lisp
  (setq-default custom-file (expand-file-name ".custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+END_SRC
* Going Evil
:PROPERTIES:
:CUSTOM_ID: evil
:END:
 #+BEGIN_SRC emacs-lisp
   (use-package evil
     :init
     (setq evil-want-integration t)
     (setq evil-want-keybinding nil)
     :config
     (evil-mode 1))

   (use-package evil-escape
     :after evil
     :init
     (setq-default evil-escape-key-sequence "jk")
     :config
     (evil-escape-mode 1))

   (use-package evil-collection
     :after evil
     :custom (evil-collection-setup-minibuffer t)
     :config
     (evil-collection-init))
 #+END_SRC
* Keybindings
:PROPERTIES:
:CUSTOM_ID: keybindings
:END:
#+BEGIN_SRC emacs-lisp
  ;; Custom Keybindings
  (use-package general
    :config (general-define-key
    :states '(normal visual insert emacs)
    :prefix "SPC"
    :non-normal-prefix "M-SPC"
    ;; "/"   '(counsel-rg :which-key "ripgrep") ; You'll need counsel package for this
    "TAB" '(switch-to-prev-buffer :which-key "previous buffer")
    ;; Evil Mode
    "ei"  '(evil-edit /home/yozu/Productivity/GitLab/nix-home/emacs/settings.org :which-key "edit emacs init")
    "ew"  '(evil-save :which-key "save current buffer")
    "eq"  '(evil-save-and-close :which-key "save and close current buffer")
    ;; Helm-specific
    "SPC" '(helm-M-x :which-key "M-x")
    "hf"  '(helm-find-files :which-key "find files")
    "hb"  '(helm-buffers-list :which-key "buffers list")
    "ho"  '(helm-occur :which-key "occurences")
    "ha"  '(helm-apropos :which-key "info about everything")
    "ho"  '(helm-info-emacs :which-key "info about emacs")
    "hw"  '(helm-world-time :which-key "world time")
    ;; Nix
    "hn"  '(helm-nixos-options :which-key "display NixOS options")
    ;; Org
    "ow"  '(widen :which-key "expand focus to the whole buffer")
    "on"  '(org-narrow-to-subtree :which-key "narrow focus to current subtree")
    ;; Shells
    "st"  '(ansi-term :which-key "open ansi terminal")
    "se"  '(eshell :which-key "open emacs shell")
    "ss"  '(shell :which-key "open default shell")
    ;; Sudo
    "su"  '(sudo-edit :which-key "open file with sudo")
    ;; Treemacs
    "tt"  '(treemacs :which-key "open / close treemacs")
    ;; Window
    "wl"  '(windmove-right :which-key "move right")
    "wh"  '(windmove-left :which-key "move left")
    "wk"  '(windmove-up :which-key "move up")
    "wj"  '(windmove-down :which-key "move bottom")
    "w/"  '(split-window-right :which-key "split right")
    "w-"  '(split-window-below :which-key "split bottom")
    "wx"  '(delete-window :which-key "delete window")
  ))
#+END_SRC
* Utility
 #+BEGIN_SRC emacs-lisp
   ;; Helm
   (use-package helm
     :init
       ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
       ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
       ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
       ;;  (global-set-key (kbd "M-x") 'helm-M-x)
       ;; (global-set-key (kbd "C-h f") 'helm-find-files)
       ;; (global-set-key (kbd "C-h b") 'helm-buffers-list)
       ;; (global-set-key (kbd "C-h o") 'helm-occur)
       ;; (global-set-key (kbd "C-h a") 'helm-apropos)
       ;; (global-set-key (kbd "C-h m") 'helm-man-woman)
       ;; (global-set-key (kbd "C-h e") 'helm-info-emacs)
       ;; (global-set-key (kbd "C-h t") 'helm-world-time)
       ;; (global-unset-key (kbd "C-x c"))
     :config
       ; rebind tab to run persistent action
       (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
       ; make TAB work in terminal
       (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
       ; list actions using C-z
       (define-key helm-map (kbd "C-z")  'helm-select-action)
       ; open helm buffer inside current window, don't occupy the entire other window
       (setq helm-split-window-in-side-p t)
       ; move to end or beginning of source when reaching top or bottom of source.
       (setq helm-move-to-line-cycle-in-source t)
       ; resume last helm session
       (global-set-key (kbd "C-M-z") #'helm-resume)
       ;; These numbers are percentages
       (setq helm-autoresize-min-height 10
         helm-autoresize-max-height 30)
       ;; Fuzzy matching
       (setq helm-recentf-fuzzy-match t
         helm-locate-fuzzy-match nil ;; locate fuzzy is worthless
         helm-M-x-fuzzy-match t
         helm-buffers-fuzzy-matching t
         helm-semantic-fuzzy-match t
         helm-apropos-fuzzy-match t
         helm-imenu-fuzzy-match t
         helm-lisp-fuzzy-completion t
         helm-completion-in-region-fuzzy-match t)
       (helm-mode 1))

   ;; Which Key
   (use-package which-key
     :init
     (setq which-key-separator " ")
     (setq which-key-prefix-prefix "+")
     :config
     (which-key-mode 1))
   (use-package treemacs
     :config
     (progn
       (setq treemacs-collapse-dirs                 (if (executable-find "python") 3 0)
             treemacs-deferred-git-apply-delay      0.5
             treemacs-display-in-side-window        t
             treemacs-file-event-delay              5000
             treemacs-file-follow-delay             0.2
             treemacs-follow-after-init             t
             treemacs-git-command-pipe              ""
             treemacs-goto-tag-strategy             'refetch-index
             treemacs-indentation                   2
             treemacs-indentation-string            " "
             treemacs-is-never-other-window         nil
             treemacs-max-git-entries               5000
             treemacs-no-png-images                 nil
             treemacs-no-delete-other-windows       t
             treemacs-project-follow-cleanup        nil
             treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
             treemacs-recenter-distance             0.1
             treemacs-recenter-after-file-follow    nil
             treemacs-recenter-after-tag-follow     nil
             treemacs-recenter-after-project-jump   'always
             treemacs-recenter-after-project-expand 'on-distance
             treemacs-show-cursor                   nil
             treemacs-show-hidden-files             t
             treemacs-silent-filewatch              nil
             treemacs-silent-refresh                nil
             treemacs-sorting                       'alphabetic-desc
             treemacs-space-between-root-nodes      t
             treemacs-tag-follow-cleanup            t
             treemacs-tag-follow-delay              1.5
             treemacs-width                         25)

       ;; The default width and height of the icons is 22 pixels. If you are
       ;; using a Hi-DPI display, uncomment this to double the icon size.
       (treemacs-resize-icons 44)

       (treemacs-follow-mode t)
       (treemacs-filewatch-mode t)
       (treemacs-fringe-indicator-mode t)
       (pcase (cons (not (null (executable-find "git")))
                    (not (null (executable-find "python3"))))
         (`(t . t)
          (treemacs-git-mode 'deferred))
         (`(t . _)
          (treemacs-git-mode 'simple))))
     :bind
     (:map global-map
           ("M-0"       . treemacs-select-window)
           ("C-x t 1"   . treemacs-delete-other-windows)
           ("C-x t t"   . treemacs)
           ("C-x t B"   . treemacs-bookmark)
           ("C-x t C-t" . treemacs-find-file)
           ("C-x t M-t" . treemacs-find-tag)))

   (use-package treemacs-evil
     :after treemacs
     )


   (use-package dashboard
     :config
     (dashboard-setup-startup-hook))
   ;; Use Dashboard as initial buffer
   (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))

   ;; git
   (use-package magit
     :config
     (setq vc-handled-backends nil))

   ;; org-mode
   (use-package org
     :config
     (org-babel-do-load-languages
       'org-babel-load-languages
         '((shell . t)
           (emacs-lisp . t)))
     (org-indent-mode)
     (org-bullets-mode))

   (use-package evil-org
     :config
     (evil-org-mode))

   (use-package ob-go)
   (use-package org-bullets)
   (use-package org-re-reveal-ref
     :ensure t
     :config
     (setq org-re-reveal-root "file:///home/yozu/test/reveal.js"))

   ;; Backups
   (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

   ;; Edit files with sudo
   (use-package sudo-edit)

   ;; 256 color support
   (use-package xterm-color)
   (add-to-list 'load-path (expand-file-name "~/.emacs.d/elpa/eterm-256color-20190123.401"))
   (use-package eterm-256color
     :config
     (add-hook 'term-mode-hook #'eterm-256color-mode))
 #+END_SRC
* Company Yasnippet
#+BEGIN_SRC emacs-lisp
  ;; http://emacs.stackexchange.com/questions/10431/get-company-to-show-suggestions-for-yasnippet-names
  ;; Add yasnippet support for all company backends
  ;; https://github.com/syl20bnr/spacemacs/pull/179
  (defvar company-mode/enable-yas t
    "Enable yasnippet for all backends.")

  (defun company-mode/backend-with-yas (backend)
    (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
        backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))
#+END_SRC
* Language Support
 #+BEGIN_SRC emacs-lisp
   (use-package flycheck
     :init
     (add-hook 'prog-mode-hook 'flycheck-mode)
     :config
     ;; Show error buffer automatically when there are errors
     (add-hook 'flycheck-after-syntax-check-hook
             (lambda  ()
               (if flycheck-current-errors
                   (flycheck-list-errors)
                 (when (get-buffer "*Flycheck errors*")
                   (switch-to-buffer "*Flycheck errors*")
                   (kill-buffer (current-buffer))))))
                  ; (delete-window)
     ;; Define the error buffer
     (add-to-list 'display-buffer-alist
                `(,(rx bos "*Flycheck errors*" eos)
                 (display-buffer-reuse-window
                  display-buffer-in-side-window)
                 (side            . bottom)
                 (reusable-frames . visible)
                 (window-height   . 0.20))))

   ;; Display current error in a tooltip
   ;; (use-package flycheck-pos-tip
   ;; :after flycheck
   ;; :config
   ;;   (flycheck-pos-tip-mode))

   ;; Auto-complete framework
   (use-package company
     :init
     (add-hook 'prog-mode-hook 'company-mode)
     :config
     (add-to-list 'company-backends 'company-mode/backend-with-yas))

   (use-package company-quickhelp
     :after company
     :config
     (company-quickhelp-mode))

   ;; Language server protocol
   (use-package lsp-mode
     :init
     (add-hook 'prog-mode-hook 'lsp-mode))

   (use-package lsp-ui
     :init
     (add-hook 'prog-mode-hook 'lsp-ui-mode))

   (use-package company-lsp
     :after company
     :init
     (push 'company-lsp company-backends)
     :config
     (setq company-lsp-cache-candidates 'auto)
     (setq company-lsp-async t)
     (setq company-lsp-enable-snippet t)
     (setq company-lsp-enable-recompletion t))

   ;; Template System
   (use-package yasnippet
     :init
     (setq yas-snippet-dirs
           '("~/.emacs.d/snippets"
             "~/.emacs.d/elpa/yasnippet-snippets-20190316.1019"))
     :config
     (yas-reload-all)
     (add-hook 'prog-mode-hook #'yas-minor-mode))

   ;; Collection of snippets
   (use-package yasnippet-snippets)

   ;; C++
   (use-package cquery
     :config
     (setq cquery-executable "/home/yozu/.nix-profile/bin/cquery")
     (setq cquery-extra-init-params '(:index (:comments 2) :cacheFormat "msgpack" :completion (:detailedLabel t)))
     (setq cquery-sem-highlight-method 'font-lock)
     (cquery-use-default-rainbow-sem-highlight)
     (setq lsp-ui-doc-include-signature nil)  ; don't include type signature in the child frame
     (setq lsp-ui-sideline-show-symbol nil)  ; don't show symbol on the right of info
     (setq company-transformers nil company-lsp-async t company-lsp-cache-candidates nil)
     ;; (setq lsp-prefer-flymake nil)
     ;; (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc))
     )

   ;; Haskell
   (use-package lsp-haskell
     :init
     (add-hook 'haskell-mode-hook #'lsp)
     :config
     ;; (setq lsp-haskell-process-path-hie "hie-wrapper")
     (lsp-haskell-set-hlint-on)
     (lsp-haskell-set-liquid-on))
     ;; (lsp-haskell-set-completion-snippets-on))

   ;; Nix
   (use-package nix-mode)
   (use-package nix-buffer)
   (use-package nixos-options)
   (use-package helm-nixos-options)
   (use-package company-nixos-options
     :config
     (add-to-list 'company-backends 'company-nixos-options))

   ;; YAML
   (use-package yaml-mode)

   (provide 'code-check)
   ;;; code-check.el ends here
 #+END_SRC
* User Interface
#+BEGIN_SRC emacs-lisp
  ;; Theme
  ;; (use-package doom-themes
  ;;  :config
  ;;  (load-theme 'doom-molokai t))

  (use-package kaolin-themes
    :config
    (load-theme 'kaolin-galaxy t)
    (kaolin-treemacs-theme))

  ;; Powerline
  (use-package telephone-line
    :config
    (telephone-line-mode t))

  (use-package all-the-icons)
#+END_SRC
