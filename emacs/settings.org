#+TITLE: DotEmacs
#+AUTHOR: K Gopal Krishna
#+OPTIONS: toc:2

#+BEGIN_QUOTE
Let us change our traditional attitude to the construction
of programs. Instead of imagining that our main task is to
instruct a computer what to do, let us concentrate rather
on explaining to human beings what we want a computer to
do.

--- /Donald Knuth/
#+END_QUOTE

* Bootstrap Package Management
:PROPERTIES:
:CUSTOM_ID: bootstrap
:END:
** Repositories
:PROPERTIES:
:CUSTOM_ID: repositories
:END:
- Load =package= (the Emacs package manager)
- Don't start it until repositories' location have been set
- Set repositories for =package= and start =package=
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (setq package-archives
    '(("org"   . "http://orgmode.org/elpa/")
      ("gnu"   . "http://elpa.gnu.org/packages/")
      ("melpa" . "https://melpa.org/packages/")))
  (package-initialize)
#+END_SRC
** Use-Package
:PROPERTIES:
:CUSTOM_ID: use-package
:END:
- Unless =use-package= is installed, refresh repositories
  and install =use-package=.
- Load =use-package=.
- Be verbose while installing packages and always ensure
  their existence.
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (setq
   use-package-verbose t
   use-package-always-ensure t)
  (require 'use-package)
#+END_SRC
* Better Defaults
:PROPERTIES:
:CUSTOM_ID: better-defaults
:END:
** Backups
:PROPERTIES:
:CUSTOM_ID: backups
:END:
- By default, Emacs saves backup files in the current directory
- This can get annoying when file starting with *~* clutter up
  in directories
- The idea is to stash them all in one place
  i.e =~/.emacs.d/backups=
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC
Though I'm very conservative of my disk space, I find that
most of my disk space remains unused even if I'm careless.
So why not live freely instead?
- Version Control backup files
- Don't delete old versions
- Auto save every file
#+BEGIN_SRC emacs-lisp
  (setq
   delete-old-versions -1
   version-control t
   vc-make-backup-files t
   auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list" t)))
#+END_SRC
** History
:PROPERTIES:
:CUSTOM_ID: history
:END:
Emacs has a server-client architecture and that's cool. Although,
losing data over reboots (of the host or the server) is still
possible and annoying. Enable =savehist= to take care of those
issues.
- History is saved in =~/.emacs.d/savehist=
- Don't truncate history, i.e - history length infinite
- Delete duplicates
- In addition to saving minibuffer history, also save
  - deleted text sequences
  - searched text sequences
  - regular expression search text sequences
#+BEGIN_SRC emacs-lisp
  (setq
   savehist-file "~/.emacs.d/savehist"
   history-length t
   history-delete-duplicates t
   savehist-save-minibuffer-history 1
   savehist-additional-variables
   '(kill-ring
     search-ring
     regexp-search-ring))
  (savehist-mode 1)
#+END_SRC
** Remove intrusive elements:
:PROPERTIES:
:CUSTOM_ID: remove-elements
:END:
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)  ; Disable blinking cursor
  (fringe-mode 0)        ; Disable fringes
  (menu-bar-mode 0)      ; Disable menu bar
  (scroll-bar-mode 0)    ; Disable scroll bar
  (tool-bar-mode 0)      ; Disable toolbar
  (tooltip-mode 0)       ; Disable tooltips
#+END_SRC
** Some Defaults
*** Set default values
:PROPERTIES:
:CUSTOM_ID: default-values
:END:
#+BEGIN_SRC emacs-lisp
  (setq-default
   ad-redefinition-action 'accept               ; Silence warnings for redefinition
   auto-window-vscroll nil                      ; Lighten vertical scroll
   confirm-kill-emacs 'yes-or-no-p              ; Confirm before exiting Emacs
   cursor-in-non-selected-windows t             ; Hide the curor in inactive windows
   delete-by-moving-to-trash t                  ; Delete files to trash
   display-line-numbers-type 'relative          ; Display relative line numbers
   display-time-default-load-average nil        ; Don't display load average
   display-time-format "%H:%M"                  ; Time format
   fill-column 60                               ; Set width for automatic line breaks
   help-window-select t                         ; Focus new help windows when opened
   indent-tabs-mode nil                         ; Stop using tabs to indent
   inhibit-startup-screen t                     ; Disable startup screen
   initial-scratch-message ""                   ; Initial scratch buffer should be empty
   left-margin-width 1                          ; Add left margin
   right-margin-width 1                         ; Add right margin
   scroll-conservatively most-positive-fixnum   ; Always scroll by one line
   scroll-margin 10                             ; Add a margin when scrolling vertically
   select-enable-clipboard t                    ; Merge system's and Emacs' clipboard
   sentence-end-double-space nil                ; End a sentence after a dot and a space
   show-trailing-whitespace t                   ; Show trailing whitespace
   show-paren-mode t                            ; Highlight matching parentheses
   tab-width 4                                  ; Set width for tabs
   uniquify-buffer-name-style 'forward          ; Set buffer name style for files that have same base folder
   window-combination-resize t                  ; Resize windows proportionally
   x-stretch-cursor t)                          ; Stretch cursor to the glypth width

  (add-to-list 'exec-path "/home/yozu/.local/bin") ; Append to $PATH
#+END_SRC
*** Set default modes
:PROPERTIES:
:CUSTOM_ID: default-modes
:END:
- Logical lines are separated by '\n' in the actual text.
- Visual lines are separated by line break of the current
  display layout.
#+BEGIN_SRC emacs-lisp
  (auto-fill-mode t)                            ; Wrap lines after fill-column value
  (cd "~/")                                     ; Move to the user's home directory
  (delete-selection-mode t)                     ; Replace region when inserting text
  (fset 'yes-or-no-p 'y-or-n-p)                 ; Replace yes / no with y / n
  (global-display-line-numbers-mode t)          ; Enable line numbers globally
  (global-subword-mode t)                       ; Iterate through CamelCase ('GtkWindow', 'MyQueen', etc) words
  (global-visual-line-mode t)                   ; Word wrap at visual lines instead of logical lines
  (mouse-avoidance-mode 'banish)                ; Avoid collision of mouse with point
  (set-default-coding-systems 'utf-8)           ; Defaults to utf-8 encoding
  (show-paren-mode t)                           ; Show matching parentheses
  (yas-global-mode t)                           ; Enable snippets globally
#+END_SRC
** Mode-line tweaks:
:PROPERTIES:
:CUSTOM_ID: mode-line-tweaks
:END:
#+BEGIN_SRC emacs-lisp
  ;; Donâ€™t compact font caches during GC.
  (setq inhibit-compacting-font-caches t)
#+END_SRC
** Speed up Emacs
*** Garbage-collect
- Garbage collection will happen automatically once this
  many /bytes/ have been allocated.
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 2000000)
#+END_SRC
*** Custom Changes
- Changes made dynamically and saved with
  =customize-save-customized= should be saved to
  =~/.emacs.d/.custom.el= instead of =init.el=.
#+BEGIN_SRC emacs-lisp
  (setq-default custom-file (expand-file-name ".custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+END_SRC
*** Profiler
:PROPERTIES:
:CUSTOM_ID: profiler
:END:
- Benchmark the amount of time taken by each component of
  Emacs to start.
#+BEGIN_SRC emacs-lisp
  (use-package esup)
#+END_SRC
* Going Evil
:PROPERTIES:
:CUSTOM_ID: evil
:END:
- Emulate VIM behaviour inside Emacs
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-shift-width 4)    ; Number of columns to shift with > and <
    (setq evil-want-keybinding nil)
    :config
    (evil-mode t))
#+END_SRC

- Add an ESC key sequence that's in the home row
#+BEGIN_SRC emacs-lisp
  (use-package evil-escape
    :after evil
    :init
    (setq-default evil-escape-key-sequence "jk")          ; Enter Normal mode when jk is pressed
    (setq-default evil-escape-unordered-key-sequence t)   ; in any order
    :config
    (evil-escape-mode t))
#+END_SRC

- A collection of evil keybindings for many minor and major
  modes.
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after evil
    :custom (evil-collection-setup-minibuffer t)
    :config
    (evil-collection-init))
#+END_SRC

- Evil keybindings for Org Mode
#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :ensure t
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda ()
                (evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+END_SRC
* Custom Keybindings
:PROPERTIES:
:CUSTOM_ID: keybindings
:END:
- Use SPACE as the leader when not in insert mode.
- When in insert mode, use META + SPACE as the leader.
#+BEGIN_SRC emacs-lisp
  (use-package general
    :config (general-define-key
    :states '(normal visual insert emacs)
    :prefix "SPC"
    :non-normal-prefix "M-SPC"

    ;; LEADER + any of the following keys results in calling
    ;; the function specified. The general combination is
    ;; binding a mnemonic keyword, preserving vim's sane
    ;; choice of keybindings.

    ;; Switch to previous buffer
    "TAB" '(switch-to-prev-buffer :which-key "previous buffer")

    ;; Evil Mode
    "ei"  '(evil-edit /home/yozu/Productivity/GitLab/nix-home/emacs/settings.org :which-key "edit emacs init")
    "ew"  '(evil-save :which-key "save current buffer")
    "eq"  '(evil-save-and-close :which-key "save and close current buffer")

    ;; Helm-specific
    "SPC" '(helm-M-x :which-key "M-x")
    "hf"  '(helm-find-files :which-key "find files")
    "hb"  '(helm-buffers-list :which-key "buffers list")
    "ho"  '(helm-occur :which-key "occurences")
    "ha"  '(helm-apropos :which-key "info about everything")
    "ho"  '(helm-info-emacs :which-key "info about emacs")
    "hw"  '(helm-world-time :which-key "world time")
    "hn"  '(helm-nixos-options :which-key "display NixOS options")

    ;; Org
    "ow"  '(widen :which-key "expand focus to the whole buffer")
    "on"  '(org-narrow-to-subtree :which-key "narrow focus to current subtree")

    ;; Shells
    "st"  '(ansi-term :which-key "open ansi terminal")
    "se"  '(eshell :which-key "open emacs shell")
    "ss"  '(shell :which-key "open default shell")

    ;; Sudo
    "su"  '(sudo-edit :which-key "open file with sudo")

    ;; Treemacs
    "tt"  '(treemacs :which-key "open / close treemacs")

    ;; Window
    "wl"  '(windmove-right :which-key "move right")
    "wh"  '(windmove-left :which-key "move left")
    "wk"  '(windmove-up :which-key "move up")
    "wj"  '(windmove-down :which-key "move bottom")
    "w/"  '(split-window-right :which-key "split right")
    "w-"  '(split-window-below :which-key "split bottom")
    "wx"  '(delete-window :which-key "delete window")
  ))
#+END_SRC
* General Utility
* Code
** Autocompletion framework
Microsoft's Language Server Protocol is really good when it
comes to emulating IDE features.
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :commands lsp)

  (use-package lsp-ui
    :commands lsp-ui-mode)

  (use-package company-lsp
    :commands company-lsp
    :init
    (setq-default company-lsp-cache-candidates 'auto)    ; Cache completions only if they are complete
    (setq-default company-lsp-async t)                   ; Fetch results asynchronously
    (setq-default company-lsp-enable-snippet t)          ; Expand snippet upon completion
    (setq-default company-lsp-enable-recompletion t))    ; Enable recompletion
#+END_SRC

** Linting and Checking
* Org Universe
** Babel
- Load languages to be used in embedded source code blocks
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages 'org-babel-load-languages
                               '((emacs-lisp . t)
                                 (shell . t)
                                 (python . t)
                                 (go . t)))
#+END_SRC
* Snippets
Load =yasnippet= and set directory where snippets are
stored.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
      (yas-load-directory "~/.emacs.d/snippets"))
#+END_SRC
** Org Mode
It is tedious to type =:results output= everytime I want
python to show results of the print statements rather than
return statements.
#+BEGIN_SRC emacs-lisp :tangle ./snippets/org-mode/org-python-src-header
  # -*- mode: snippet -*-
  # name: org-python-src-header
  # key: <py
  # --
  #+BEGIN_SRC python :results output
    $0
  #+END_SR$1
#+END_SRC
