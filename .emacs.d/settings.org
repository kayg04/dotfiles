#+TITLE: DotEmacs
#+AUTHOR: K Gopal Krishna

#+BEGIN_QUOTE
Let us change our traditional attitude to the construction
of programs. Instead of imagining that our main task is to
instruct a computer what to do, let us concentrate rather on
explaining to human beings what we want a computer to do.

-- /Donald Knuth/
#+END_QUOTE

* Bootstrap Package Management
:PROPERTIES:
:CUSTOM_ID: bootstrap
:END:
** Repositories
:PROPERTIES:
:CUSTOM_ID: repositories
:END:
- Load =package= (the Emacs package manager)
- Set default TLS version to 1.3
- Don't start it until repositories' location have been set
- Set repositories for =package= and start =package=
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
  (setq package-enable-at-startup nil)
  (setq package-archives
    '(("org"   . "https://orgmode.org/elpa/")
      ("gnu"   . "https://elpa.gnu.org/packages/")
      ("melpa" . "https://melpa.org/packages/")))
  (package-initialize)
#+END_SRC
** Use-Package
:PROPERTIES:
:CUSTOM_ID: use-package
:END:
- Unless =use-package= is installed, refresh repositories
  and install =use-package=.
- Load =use-package=.
- Be verbose while installing packages and always ensure
  their existence.
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (setq
   use-package-verbose t
   use-package-always-ensure t)
  (require 'use-package)
#+END_SRC
* Better Defaults
:PROPERTIES:
:CUSTOM_ID: better-defaults
:END:
** Backups
:PROPERTIES:
:CUSTOM_ID: backups
:END:
- By default, Emacs saves backup files in the current directory
- This can get annoying when file starting with *~* clutter up
  in directories
- The idea is to stash them all in one place
  i.e =~/.emacs.d/backups=
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC
Though I'm very conservative of my disk space, I find that
most of my disk space remains unused even if I'm careless.
So why not live freely instead?
- Version Control backup files
- Don't delete old versions
- Auto save every file
#+BEGIN_SRC emacs-lisp
  (setq
   delete-old-versions -1
   version-control t
   vc-make-backup-files t
   auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list" t)))
#+END_SRC
** Custom Changes
- Changes made dynamically and saved with
  =customize-save-customized= should be saved to
  =~/.emacs.d/.custom.el= instead of =init.el=.
#+BEGIN_SRC emacs-lisp
  (setq-default custom-file (expand-file-name ".custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+END_SRC
** History
:PROPERTIES:
:CUSTOM_ID: history
:END:
Emacs has a server-client architecture and that's cool. Although,
losing data over reboots (of the host or the server) is still
possible and annoying. Enable =savehist= to take care of those
issues.
- History is saved in =~/.emacs.d/savehist=
- Don't truncate history, i.e - history length infinite
- Delete duplicates
- In addition to saving minibuffer history, also save
  - deleted text sequences
  - searched text sequences
  - regular expression search text sequences
#+BEGIN_SRC emacs-lisp
  (setq
   savehist-file "~/.emacs.d/savehist"
   history-length t
   history-delete-duplicates t
   savehist-save-minibuffer-history 1
   savehist-additional-variables
   '(kill-ring
     search-ring
     regexp-search-ring))
  (savehist-mode 1)
#+END_SRC
** Remove intrusive elements
:PROPERTIES:
:CUSTOM_ID: remove-elements
:END:
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)  ; Disable blinking cursor
  (fringe-mode 0)        ; Disable fringes
  (menu-bar-mode 0)      ; Disable menu bar
  (scroll-bar-mode 0)    ; Disable scroll bar
  (tool-bar-mode 0)      ; Disable toolbar
  (tooltip-mode 0)       ; Disable tooltips
#+END_SRC
** Some Defaults
*** Set default values
:PROPERTIES:
:CUSTOM_ID: default-values
:END:
#+BEGIN_SRC emacs-lisp
  (setq-default
    ad-redefinition-action 'accept                ; Silence warnings for redefinition
    auto-window-vscroll nil                      ; Lighten vertical scroll
    confirm-kill-emacs 'yes-or-no-p              ; Confirm before exiting Emacs
    cursor-in-non-selected-windows t             ; Hide the curor in inactive windows
    delete-by-moving-to-trash t                  ; Delete files to trash
    display-line-numbers-type 'relative          ; Display relative line numbers
    display-time-default-load-average nil        ; Don't display load average
    display-time-format "%H:%M"                  ; Time format
    fill-column 60                               ; Set width for automatic line breaks
    help-window-select t                         ; Focus new help windows when opened
    indent-tabs-mode nil                         ; Stop using tabs to indent
    inhibit-startup-screen t                     ; Disable startup screen
    initial-scratch-message ""                   ; Initial scratch buffer should be empty
    left-margin-width 1                          ; Add left margin
    right-margin-width 1                         ; Add right margin
    scroll-conservatively most-positive-fixnum   ; Always scroll by one line
    scroll-margin 10                             ; Add a margin when scrolling vertically
    select-enable-clipboard t                    ; Merge system's and Emacs' clipboard
    sentence-end-double-space nil                ; End a sentence after a dot and a space
    show-trailing-whitespace t                   ; Show trailing whitespace
    show-paren-mode t                            ; Highlight matching parentheses
    tab-width 4                                  ; Set width for tabs
    uniquify-buffer-name-style 'forward          ; Set buffer name style for files that have same base folder
    window-combination-resize t                  ; Resize windows proportionally
    x-stretch-cursor t)                          ; Stretch cursor to the glypth width

  (add-to-list 'exec-path "/home/yozu/.local/bin") ; Append to $PATH
#+END_SRC
*** Set default modes
:PROPERTIES:
:CUSTOM_ID: default-modes
:END:
- Logical lines are separated by '\n' in the actual text.
- Visual lines are separated by line break of the current
  display layout.
#+BEGIN_SRC emacs-lisp
  (auto-fill-mode t)                            ; Wrap lines after fill-column value
  (cd "~/")                                     ; Move to the user's home directory
  (delete-selection-mode t)                     ; Replace region when inserting text
  (fset 'yes-or-no-p 'y-or-n-p)                 ; Replace yes / no with y / n
  (global-display-line-numbers-mode t)          ; Enable line numbers globally
  (global-subword-mode t)                       ; Iterate through CamelCase ('GtkWindow', 'MyQueen', etc) words
  (global-visual-line-mode t)                   ; Word wrap at visual lines instead of logical lines
  (mouse-avoidance-mode 'banish)                ; Avoid collision of mouse with point
  (set-default-coding-systems 'utf-8)           ; Defaults to utf-8 encoding
  (show-paren-mode t)                           ; Show matching parentheses
#+END_SRC
** Speed up Emacs
*** Garbage-collect
- Garbage collection will happen automatically once this
  many /bytes/ have been allocated.
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 2000000)
#+END_SRC
*** Profiler
:PROPERTIES:
:CUSTOM_ID: profiler
:END:
- Benchmark the amount of time taken by each component of
  Emacs to start.
#+BEGIN_SRC emacs-lisp
  (use-package esup)
#+END_SRC
** TRAMP
- Speed up TRAMP by not version controlling remote files
#+BEGIN_SRC emacs-lisp
  (setq remote-file-name-inhibit-cache nil)
  (setq vc-ignore-dir-regexp
        (format "%s\\|%s"
                      vc-ignore-dir-regexp
                      tramp-file-name-regexp))
  (setq tramp-verbose 1)
#+END_SRC
* Code
** Autocompletion
*** Framework
#+BEGIN_SRC emacs-lisp
  (use-package company
    :defer t
    :hook
    (after-init . global-company-mode))
#+END_SRC
**** Backends
*** Engine
Microsoft's Language Server Protocol is really good when it
comes to emulating IDE features.
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :defer t
    :commands lsp)

  (use-package lsp-ui
    :defer t
    :commands lsp-ui-mode)

  (use-package company-lsp
    :defer t
    :after company-mode
    :commands company-lsp
    :init
    (setq-default company-lsp-cache-candidates 'auto)    ; Cache completions only if they are complete
    (setq-default company-lsp-async t)                   ; Fetch results asynchronously
    (setq-default company-lsp-enable-snippet t)          ; Expand snippet upon completion
    (setq-default company-lsp-enable-recompletion t))    ; Enable recompletion
#+END_SRC

** Indentation
- Show indentation lines
- Responsive indentation is set to /stack/ which means a set
  of three colours will be used to represent guides.
- /character/ method means that the first column of each
  level of indentation is drawn using a column of
  characters.
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :hook (prog-mode . highlight-indent-guides-mode)
    :config
    (setq highlight-indent-guides-method 'character)
    (setq highlight-indent-guides-responsive 'stack))
#+END_SRC
** Language Support
*** Caddy
#+BEGIN_SRC emacs-lisp
  (use-package caddyfile-mode)
#+END_SRC
*** Golang
**** Major Mode
#+BEGIN_SRC emacs-lisp
  (use-package go-mode)
#+END_SRC
**** Org Mode
#+BEGIN_SRC emacs-lisp
  (use-package ob-go)
#+END_SRC
*** Nginx
#+BEGIN_SRC emacs-lisp
  (use-package nginx-mode)
  (use-package company-nginx)
#+END_SRC
*** Nix
**** Major Mode
#+BEGIN_SRC emacs-lisp
  (use-package nix-mode)
#+END_SRC
**** Essentials
#+BEGIN_SRC emacs-lisp
  (use-package nixos-options)
  (use-package helm-nixos-options)
  (use-package company-nixos-options
    :config
    (add-to-list 'company-backends 'company-nixos-options))
  (use-package nix-sandbox)
#+END_SRC
*** TOML
#+BEGIN_SRC emacs-lisp
  (use-package toml-mode)
#+END_SRC
*** YAML
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode)
#+END_SRC
** Linting and Checking
*FlyCheck* is the modern replacement as a syntax checker for Emacs.
By default, /FlyCheck/ checks a buffer whenever
- it is enabled
- the buffer is saved
- a new line is inserted
- a short time has passed since last change

By default, /FlyCheck/ will pop up errors just like any
other buffer. The following settings enforce rules on how to
display errors.
- Display buffer on the _bottom_
- Window height should be 25% of the total screen space
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :defer t
    :hook (prog-mode . flycheck-mode)
    :config
    (add-to-list 'display-buffer-alist
               `(,(rx bos "*Flycheck errors*" eos)
                (display-buffer-reuse-window
                 display-buffer-in-side-window)
                (side            . bottom)
                (reusable-frames . visible)
                (window-height   . 0.25))))
#+END_SRC

** Parentheses
- Try to be smart about opening and closes blocks
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :hook (prog-mode . smartparens-mode)
    :config
    (require 'smartparens-config))
#+END_SRC
* Custom Keybindings
:PROPERTIES:
:CUSTOM_ID: keybindings
:END:
** Evil
- Use SPACE as the leader when not in insert mode.
- When in insert mode, use META + SPACE as the leader.
#+BEGIN_SRC emacs-lisp
  (use-package general
    :config (general-define-key
    :states '(normal visual insert emacs)
    :prefix "SPC"
    :non-normal-prefix "M-SPC"

    ;; LEADER + any of the following keys results in calling
    ;; the function specified. The general combination is
    ;; binding a mnemonic keyword, preserving vim's sane
    ;; choice of keybindings.

    ;; Buffers
    "TAB" '(switch-to-prev-buffer :which-key "previous buffer")
    "bl"  '(list-buffers :which-key "list buffers")
    "bq"  '(kill-buffer :which-key "kill buffer")
    "bw"  '(save-buffer :which-key "save buffer")
    "bs"  '(switch-to-buffer :which-key "switch buffer")

    ;; Evil Mode
    "ei"  '(evil-edit /home/yozu/Productivity/GitLab/nix-home/emacs/settings.org :which-key "edit emacs init")
    "ew"  '(evil-save :which-key "save current buffer")
    "eW"  '(evil-save-and-close :which-key "save current buffer and close window")
    "eq"  '(evil-quit :which-key "close current window")
    "eQ"  '(evil-save-and-quit :which-key "save all buffers and exit Emacs")

    ;; FlyCheck
    "fe"  '(flycheck-explain-error-at-point :which-key "explain error at point")
    "fl"  '(flycheck-list-errors :which-key "list all errors")
    "fn"  '(flycheck-next-error :which-key "show next error")
    "fp"  '(flycheck-previous-error :which-key "show previous error")

    ;; Helm-specific
    "SPC" '(helm-M-x :which-key "M-x")
    "hf"  '(helm-find-files :which-key "find files")
    "hb"  '(helm-buffers-list :which-key "buffers list")
    "ho"  '(helm-occur :which-key "occurences")
    "ha"  '(helm-apropos :which-key "info about everything")
    "ho"  '(helm-info-emacs :which-key "info about emacs")
    "hw"  '(helm-world-time :which-key "world time")
    "hn"  '(helm-nixos-options :which-key "display NixOS options")

    ;; Magit
    "ms"  '(magit-status :which-key "display git status")

    ;; Org
    "ow"  '(widen :which-key "expand focus to the whole buffer")
    "on"  '(org-narrow-to-subtree :which-key "narrow focus to current subtree")

    ;; Shells
    "st"  '(ansi-term :which-key "open ansi terminal")
    "se"  '(eshell :which-key "open emacs shell")
    "ss"  '(shell :which-key "open default shell")

    ;; Sudo
    "su"  '(sudo-edit :which-key "open file with sudo")

    ;; Treemacs
    "tt"  '(treemacs :which-key "open / close treemacs")

    ;; Native windows
    "wl"  '(windmove-right :which-key "move right")
    "wh"  '(windmove-left :which-key "move left")
    "wk"  '(windmove-up :which-key "move up")
    "wj"  '(windmove-down :which-key "move bottom")
    "w/"  '(split-window-right :which-key "split right")
    "w-"  '(split-window-below :which-key "split bottom")
    "wx"  '(delete-window :which-key "delete window")
    ;; Awesome Tab
    "wn"  '(awesome-tab-forward-tab :which-key "open next tab")
    "wp"  '(awesome-tab-backward-tab :which-key "open previous tab")
    "ws"  '(awesome-tab-switch-group :which-key "switch groups of tabs")
    ;; Workspaces
    "wr"  '(eyebrowse-rename-window-config :which-key "rename workspace")
  ))
#+END_SRC
** Native
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-r") 'eyebrowse-rename-window-config)
#+END_SRC
* Going Evil
:PROPERTIES:
:CUSTOM_ID: evil
:END:
** Essentials
*** The De/vi/l itself
- Emulate VIM behaviour inside Emacs
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-shift-width 4)    ; Number of columns to shift with > and <
    (setq evil-want-keybinding nil)
    :config
    (evil-mode t))
#+END_SRC

*** Escape
- Add an ESC key sequence that's in the home row
#+BEGIN_SRC emacs-lisp
  (use-package evil-escape
    :after evil
    :init
    (setq-default evil-escape-key-sequence "jk")          ; Enter Normal mode when jk is pressed
    (setq-default evil-escape-unordered-key-sequence t)   ; in any order
    :config
    (evil-escape-mode t))
#+END_SRC

*** Collection
- A collection of evil keybindings for many minor and major
  modes.
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after evil
    :custom (evil-collection-setup-minibuffer t)
    :config
    (evil-collection-init))
#+END_SRC

** Extras
*** Org-Mode
- Evil keybindings for Org Mode
#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :ensure t
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda ()
                (evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+END_SRC
*** Magit
#+BEGIN_SRC emacs-lisp
  (use-package evil-magit
    :config
    (setq evil-magit-use-y-for-yank t)    ;; Disable visual mode in magit buffers
    (setq evil-magit-state 'normal))       ;; Start Magit buffers in this mode
#+END_SRC
* Org Universe
** Babel
- Load languages to be used in embedded source code blocks
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages 'org-babel-load-languages
                               '((emacs-lisp . t)
                                 (shell . t)
                                 (python . t)
                                 (go . t)))
#+END_SRC
** Hooks
- Automatically enable the following in programming modes:
  - Indentation
  - Flyspell
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook #'org-indent-mode)
  (add-hook 'org-mode-hook #'flyspell-mode)
#+END_SRC
* Snippets
** Engine
Load =yasnippet= and set directory where snippets are
stored.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (setq yas-snippet-dirs
          '("~/.emacs.d/snippets"))                ;; personal snippets
    (push yasnippet-snippets-dir yas-snippet-dirs)
    (yas-global-mode))
#+END_SRC
** Snippet Source
*** Yasnippet
- Add a lot of snippets from GitHub
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets)
#+END_SRC
*** Org Mode
It is tedious to type =:results output= everytime I want
python to show results of the print statements rather than
return statements.
#+BEGIN_SRC emacs-lisp :tangle ./snippets/org-mode/org-python-src-header
  # -*- mode: snippet -*-
  # name: org-python-src-header
  # key: <py
  # --
  ,#+BEGIN_SRC python :results output
    $0
  ,#+END_SRC
#+END_SRC
* User Interface
** Gutter
#+BEGIN_SRC emacs-lisp
  (use-package fringe-helper)
  (use-package git-gutter-fringe
      :config
      (global-git-gutter-mode)
      (set-face-foreground 'git-gutter-fr:modified "yellow")
      (set-face-foreground 'git-gutter-fr:added    "green")
      (set-face-foreground 'git-gutter-fr:deleted  "red")
      (setq-default left-fringe-width  10)
      (setq-default right-fringe-width 10)
      (setq git-gutter-fr:side 'left-fringe))
#+END_SRC
** Icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :config
    (setq inhibit-compacting-font-caches t))
#+END_SRC
** Highlight
*** Delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
** Modeline
- Use Doom Modeline for additional eye candy
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :hook
      (after-init . doom-modeline-mode)
    :config
      ;; How tall the mode-line should be. It's only respected in GUI.
      ;; If the actual char height is larger, it respects the actual height.
      (setq doom-modeline-height 20)

      ;; How wide the mode-line bar should be. It's only respected in GUI.
      (setq doom-modeline-bar-width 3)

      ;; Determines the style used by `doom-modeline-buffer-file-name'.
      ;;
      ;; Given ~/Projects/FOSS/emacs/lisp/comint.el
      ;;   truncate-upto-project => ~/P/F/emacs/lisp/comint.el
      ;;   truncate-from-project => ~/Projects/FOSS/emacs/l/comint.el
      ;;   truncate-with-project => emacs/l/comint.el
      ;;   truncate-except-project => ~/P/F/emacs/l/comint.el
      ;;   truncate-upto-root => ~/P/F/e/lisp/comint.el
      ;;   truncate-all => ~/P/F/e/l/comint.el
      ;;   relative-from-project => emacs/lisp/comint.el
      ;;   relative-to-project => lisp/comint.el
      ;;   file-name => comint.el
      ;;   buffer-name => comint.el<2> (uniquify buffer name)
      ;;
      ;; If you are expereicing the laggy issue, especially while editing remote files
      ;; with tramp, please try `file-name' style.
      ;; Please refer to https://github.com/bbatsov/projectile/issues/657.
      (setq doom-modeline-buffer-file-name-style 'truncate-upto-project)

      ;; Whether display icons in mode-line or not.
      (setq doom-modeline-icon t)

      ;; Whether display the icon for major mode. It respects `doom-modeline-icon'.
      (setq doom-modeline-major-mode-icon t)

      ;; Whether display color icons for `major-mode'. It respects
      ;; `doom-modeline-icon' and `all-the-icons-color-icons'.
      (setq doom-modeline-major-mode-color-icon t)

      ;; Whether display icons for buffer states. It respects `doom-modeline-icon'.
      (setq doom-modeline-buffer-state-icon t)

      ;; Whether display buffer modification icon. It respects `doom-modeline-icon'
      ;; and `doom-modeline-buffer-state-icon'.
      (setq doom-modeline-buffer-modification-icon t)

      ;; Whether display minor modes in mode-line or not.
      (setq doom-modeline-minor-modes nil)

      ;; If non-nil, a word count will be added to the selection-info modeline segment.
      (setq doom-modeline-enable-word-count nil)

      ;; Whether display buffer encoding.
      (setq doom-modeline-buffer-encoding t)

      ;; Whether display indentation information.
      (setq doom-modeline-indent-info t)

      ;; If non-nil, only display one number for checker information if applicable.
      (setq doom-modeline-checker-simple-format t)

      ;; The maximum displayed length of the branch name of version control.
      (setq doom-modeline-vcs-max-length 12)

      ;; Whether display perspective name or not. Non-nil to display in mode-line.
      (setq doom-modeline-persp-name nil)

      ;; Whether display `lsp' state or not. Non-nil to display in mode-line.
      (setq doom-modeline-lsp t)

      ;; Whether display github notifications or not. Requires `ghub` package.
      (setq doom-modeline-github nil)

      ;; The interval of checking github.
      ;; (setq doom-modeline-github-interval (* 30 60))

      ;; Whether display environment version or not
      (setq doom-modeline-env-version t)
      ;; Or for individual languages
      (setq doom-modeline-env-enable-python t)
      (setq doom-modeline-env-enable-ruby nil)
      (setq doom-modeline-env-enable-perl nil)
      (setq doom-modeline-env-enable-go t)
      (setq doom-modeline-env-enable-elixir nil)
      (setq doom-modeline-env-enable-rust nil)

      ;; Change the executables to use for the language version string
      (setq doom-modeline-env-python-executable "python")
      (setq doom-modeline-env-ruby-executable "ruby")
      (setq doom-modeline-env-perl-executable "perl")
      (setq doom-modeline-env-go-executable "go")
      (setq doom-modeline-env-elixir-executable "iex")
      (setq doom-modeline-env-rust-executable "rustc")

      ;; Whether display mu4e notifications or not. Requires `mu4e-alert' package.
      (setq doom-modeline-mu4e nil)

      ;; Whether display irc notifications or not. Requires `circe' package.
      (setq doom-modeline-irc nil)

      ;; Function to stylize the irc buffer names.
      ;; (setq doom-modeline-irc-stylize 'identity)
      )
#+END_SRC
** Prettify
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook (lambda ()
     "Beautify Org Checkbox Symbol"
     (push '("[ ]" . "☐") prettify-symbols-alist)
     (push '("[X]" . "☑" ) prettify-symbols-alist)
     (push '("[-]" . "❍" ) prettify-symbols-alist)
     (prettify-symbols-mode)))
#+END_SRC
** Themes
*** Doom
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :config
      ;; Available themes: https://github.com/hlissner/emacs-doom-themes
      ;; Global settings (defaults)
      (setq doom-themes-enable-bold t)    ; if nil, bold is universally disabled
      (setq doom-themes-enable-italic t)   ; if nil, italics is universally disabled

      ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
      ;; may have their own settings.
      ;; (load-theme 'doom-one t)

      ;; Enable flashing mode-line on errors
      (doom-themes-visual-bell-config)

      ;; Enable custom neotree theme (all-the-icons must be installed!)
      ;; (doom-themes-neotree-config)
      ;; or for treemacs users
      (doom-themes-treemacs-config)

      ;; Corrects (and improves) org-mode's native fontification.
      (doom-themes-org-config))
#+END_SRC

- Set theme
#+BEGIN_SRC emacs-lisp
  (load-theme 'doom-peacock t)
#+END_SRC
*** Kaolin
#+BEGIN_SRC emacs-lisp
  (use-package kaolin-themes)
  ;;  :config
  ;;  (kaolin-treemacs-theme))
#+END_SRC
* Utility
** Anything.el
*** Core
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :config
    (helm-mode t))
#+END_SRC
** Dashboard
- Display Dashboard on opening Emacs
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    ;; Open Dashboard on `emacsclient -c`
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    ;; Set the title
    (setq dashboard-banner-logo-title "Welcome to the Lisp Machine!")
    ;; Set the banner
    (setq dashboard-startup-banner 3)
    ;; Value can be
    ;; 'official which displays the official emacs logo
    ;; 'logo which displays an alternative emacs logo
    ;; 1, 2 or 3 which displays one of the text banners
    ;; "path/to/your/image.png" which displays whatever image you would prefer

    ;; Content is not centered by default. To center, set
    (setq dashboard-center-content t)

    ;; To disable shortcut "jump" indicators for each section, set
    (setq dashboard-show-shortcuts t))
#+END_SRC
** Eshell
*** Autosuggestions
- Fish like autocompletion for Eshell
#+BEGIN_SRC emacs-lisp
  (use-package esh-autosuggest
    :hook (eshell-mode . esh-autosuggest-mode))
    ;; If you have use-package-hook-name-suffix set to nil, uncomment and use the
    ;; line below instead:
    ; :hook (eshell-mode-hook . esh-autosuggest-mode)
#+END_SRC
** File Manager
- Add a file manager in the side pane
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if (executable-find "python3") 3 0)
            treemacs-deferred-git-apply-delay      0.5
            treemacs-display-in-side-window        t
            treemacs-eldoc-display                 t
            treemacs-file-event-delay              5000
            treemacs-file-follow-delay             0.2
            treemacs-follow-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         nil
            treemacs-max-git-entries               5000
            treemacs-missing-project-action        'ask
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             t
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-desc
            treemacs-space-between-root-nodes      t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-width                         25)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null (executable-find "python3"))))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after treemacs evil
    :ensure t)

  ;; (use-package treemacs-projectile
  ;;  :after treemacs projectile
  ;;  :ensure t)

  (use-package treemacs-icons-dired
    :after treemacs dired
    :ensure t
    :config (treemacs-icons-dired-mode))

  ;; (use-package treemacs-magit
  ;;  :after treemacs magit
  ;;  :ensure t)
#+END_SRC
** Git Porcelain
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :defer t)
#+END_SRC
** Page line breaks
- Turn ugly form feeds into pretty horizontal lines
#+BEGIN_SRC emacs-lisp
  (use-package page-break-lines
    :config
    (global-page-break-lines-mode))
#+END_SRC
** Remember keybindings
- Show instructions in the bottom for keybindings
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-setup-side-window-bottom)
    (which-key-mode))
#+END_SRC
** Tabs
- Add tabs to Emacs
#+BEGIN_SRC emacs-lisp
  ;; (use-package awesome-tab
  ;;   :load-path "/home/yozu/.emacs.d/elpa/awesome-tab"
  ;;   :config
  ;;   (setq awesome-tab-style "slant")
  ;;   (awesome-tab-build-helm-source)
  ;;   (awesome-tab-mode t))
#+END_SRC
** Workspaces
- Add workspaces to Emacs
- New workspace should be empty
- Setup alternative, more intuitive keys
#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
    :hook
    (after-init . eyebrowse-mode)
    :config
    (setq eyebrowse-new-workspace t)
    (eyebrowse-setup-opinionated-keys))
#+END_SRC
